#!/usr/bin/python

from deity.functionality import Functionality
from deity.statusitems.date import Date
from deity.statusitems.volume import Volume
from deity.statusitems.network import Network
from deity.statusitems.brightness import Brightness
from deity.statusitems.battery import Battery
from deity.statusitems.cpu import CPU
from deity.statusitems.memory import Memory
from argparse import ArgumentParser

main_parser = ArgumentParser(description="Control a Linux desktop without a DE.")
subparsers = main_parser.add_subparsers(title="commands", dest="command")

screenshot_parser = subparsers.add_parser("screenshot", help="take a screenshot")
screenshot_parser.add_argument("--destination", help="Where to save the screenshot", default=None, type=str)

audio_parser = subparsers.add_parser("audio", help="control audio")
audio_parser.add_argument("--use-source", help="Modify the volume of the microphone rather than the speaker.", action='store_true')
audio_parser.add_argument("--adjust-volume", metavar="INTEGER", help="Adjust audo volume", type=int)
audio_parser.add_argument("--toggle-mute", help="Toggle audo mute", action="store_true")
audio_parser.add_argument("--output", metavar="NAME", help="Set the active audio sink", type=str)
audio_parser.add_argument("--input", metavar="INTEGER", help="Set the active audio source", type=str)
audio_parser.add_argument("--list-outputs", help="Print a listing of sinks", action='store_true')
audio_parser.add_argument("--list-inputs", help="Print a listing of sources", action='store_true')

brightness_parser = subparsers.add_parser("brightness", help="control brightness")
brightness_parser.add_argument("--backlight", metavar="NAME", help="The name of your backlight in /sys/class/<SYSCLASS>")
brightness_parser.add_argument("--backlight-class", metavar="SYSCLASS", help="The class of your backlight in /sys/class/")
brightness_parser.add_argument("--adjust", metavar="INTEGER", help="Adjust the brightness by INTEGER", type=int)
brightness_parser.add_argument("--set", metavar="INTEGER", help="Set the brightness to INTEGER", type=int)

i3bar_parser = subparsers.add_parser("i3bar", help="i3bar-compliant status bar daemon")
i3bar_parser.add_argument("--date-format", metavar="FORMAT", help="Display a strftime date in the statusbar using FORMAT", default="%-m.%-d.%y")
i3bar_parser.add_argument("--time-format", metavar="FORMAT", help="Display a strftime time in the statusbar using FORMAT", default="%-I:%M %p")
i3bar_parser.add_argument("--refresh-interval", metavar="FLOAT", help="Set the refresh interval", type=float, default=2.0)
i3bar_parser.add_argument("--color-positive", metavar="HEXCOLOR", help="Default text color")
i3bar_parser.add_argument("--color-negative", metavar="HEXCOLOR", help="Text color used to indicate a negative condition")
i3bar_parser.add_argument("--color-neutral", metavar="HEXCOLOR", help="Text color used to indicate a neutral condition")
i3bar_parser.add_argument("--power-supply", metavar="POWER_SUPPLY", help="Power supply for which to report percentage")
i3bar_parser.add_argument("--wifi-iface", metavar="INTERFACE", help="Wi-Fi interface for which to report status", default="wlan0")
i3bar_parser.add_argument("--vpn-iface", metavar="INTERFACE", help="VPN/tunnel interface for which to report status", default="tun0")
i3bar_parser.add_argument("--eth-iface", metavar="INTERFACE", help="Ethernet interface for which to report status", default="ens9")
i3bar_parser.add_argument("--backlight", metavar="NAME", help="/sys/class/<CLASS>/<NAME>", default="intel_backlight")
i3bar_parser.add_argument("--backlight-class", metavar="CLASS", help="/sys/class/<CLASS>/<NAME>", default="backlight")

args = main_parser.parse_args().__dict__

if "command" in args:
  command = args["command"]
  del args["command"]
else:
  command = "i3bar"

go_kwargs = dict((k,v) for k,v in args.items() if bool(v) and v is not None)

try:
  Functionality(command).go(**go_kwargs)
except KeyboardInterrupt:
  exit(0)
